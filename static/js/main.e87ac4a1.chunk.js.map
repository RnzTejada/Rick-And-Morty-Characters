{"version":3,"sources":["assets/logo.png","axios.js","components/Logo/index.jsx","components/CharacterCard/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","characters","axios","create","baseURL","timeout","getCharacters","page","a","get","res","console","log","message","Logardo","src","Logo","className","alt","CharacterCard","name","image","Col","xs","lg","style","backgroundImage","App","useState","loading","setLoading","error","setError","info","results","data","setData","nextPage","setNextPage","useEffect","fetchCharacters","Container","clasname","Row","map","character","key","id","next","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,2LCKrCC,EAAaC,IAAMC,OAAO,CAC9BC,QAAS,4CACTC,QAAS,MAKOH,IAAMC,OAAO,CAC7BC,QAAS,2CACTC,QAAS,MAOMH,IAAMC,OAAO,CAC5BC,QAAS,0CACTC,QAAS,MAOJ,SAAeC,EAAtB,kC,4CAAO,WAA6BC,GAA7B,eAAAC,EAAA,+EAEaP,EAAWQ,IAAX,iBAAyBF,IAFtC,cAECG,EAFD,yBAGIA,GAHJ,gCAKHC,QAAQC,IAAI,KAAMC,SALf,0D,2CC1BQ,SAASC,IACtB,OAAO,yBAAKC,IAAKC,IAAMC,UAAU,OAAOC,IAAI,mB,YCoB/BC,EAfO,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC7B,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,yBACEP,UAAU,gBACVQ,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAT,OAExB,yBAAKJ,UAAU,+CACZG,M,gBC8CIO,MApDf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,mBAAS,MAFtB,mBAENG,EAFM,KAECC,EAFD,OAGWJ,mBAAS,CAAEK,KAAM,GAAIC,QAAS,KAHzC,mBAGNC,EAHM,KAGAC,EAHA,OAImBR,mBAAS,GAJ5B,mBAINS,EAJM,KAIIC,EAJJ,KAiBb,OAXAC,qBAAU,YACa,uCAAG,WAAOhC,GAAP,eAAAC,EAAA,6DACtBG,QAAQC,IAAIL,GACZuB,GAAW,GACXE,EAAS,MAHa,SAIN1B,EAAcC,GAJR,OAIlBG,EAJkB,OAKtBC,QAAQC,IAAIF,GACZ0B,EAAQ,CAAEH,KAAMvB,EAAIyB,KAAKF,KAAMC,QAASxB,EAAIyB,KAAKD,UAN3B,2CAAH,sDAQrBM,CAAgBH,KACf,CAACA,IAEF,yBAAKpB,UAAU,OACZc,EACC,sCAEA,kBAACU,EAAA,EAAD,CAAWxB,UAAU,eACnB,kBAACH,EAAD,CAAS4B,SAAS,gBAClB,kBAACC,EAAA,EAAD,KACGR,GACCA,EAAKD,QAAQU,KAAI,SAACC,GAAD,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAUE,GACf3B,KAAMyB,EAAUzB,KAChBC,MAAOwB,EAAUxB,YAKxBQ,GAAW,uBAAGa,SAAS,cAAZ,eACVb,GAAWM,EAAKF,KAAKe,MACrB,4BACEC,QAAS,WACPX,EAAYD,EAAW,GACvBP,GAAW,KAHf,gB,MCrCQoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLpB,QAAQoB,MAAMA,EAAMlB,c","file":"static/js/main.e87ac4a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.42d6efdb.png\";","import axios from \"axios\";\n\n/**\n * characters instance\n */\nconst characters = axios.create({\n  baseURL: \"https://rickandmortyapi.com/api/character\",\n  timeout: 40000,\n}); /**\n\n* locations instance\n*/\nconst locations = axios.create({\n  baseURL: \"https://rickandmortyapi.com/api/location\",\n  timeout: 40000,\n});\n\n/**\n * episodes instance\n *\n */\nconst episodes = axios.create({\n  baseURL: \"https://rickandmortyapi.com/api/episode\",\n  timeout: 40000,\n});\n\n/**\n * GetCharacters\n * @param {number} page\n */\nexport async function getCharacters(page) {\n  try {\n    let res = await characters.get(`/?page=${page}`);\n    return res;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n","import React from \"react\";\n//Core Imports\nimport Logo from \"../../assets/logo.png\";\n\nexport default function Logardo() {\n  return <img src={Logo} className=\"Logo\" alt=\"Rick and Morty\" />;\n}\n","import React from \"react\";\n//Core Imports\nimport { Col } from \"react-bootstrap\";\n\n/**\n * Character Card\n * @description show de photo and name of character\n * @param {string} name\n * @param {string} Image\n */\nconst CharacterCard = ({ name, image }) => {\n  return (\n    <Col xs={12} lg={4}>\n      <div\n        className=\"CharacterCard\"\n        style={{ backgroundImage: `url(${image})` }}\n      >\n        <div className=\"CharacterCard__name-container text-truncate\">\n          {name}\n        </div>\n      </div>\n    </Col>\n  );\n};\n\nexport default CharacterCard;\n","import React, { useState, useEffect } from \"react\";\n//Core Imports\n//Axios\nimport { getCharacters } from \"./axios\";\n//Components\n//Logo\nimport Logardo from \"./components/Logo\";\n//CharacterCard\nimport CharacterCard from \"./components/CharacterCard\";\n//React bootstrap components\nimport { Container, Row } from \"react-bootstrap\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState({ info: {}, results: [] });\n  const [nextPage, setNextPage] = useState(1);\n\n  useEffect(() => {\n    const fetchCharacters = async (page) => {\n      console.log(page);\n      setLoading(false);\n      setError(null);\n      let res = await getCharacters(page);\n      console.log(res);\n      setData({ info: res.data.info, results: res.data.results });\n    };\n    fetchCharacters(nextPage);\n  }, [nextPage]);\n  return (\n    <div className=\"App\">\n      {error ? (\n        <div>Error</div>\n      ) : (\n        <Container className=\"text-center\">\n          <Logardo clasname=\"text-center\" />\n          <Row>\n            {data &&\n              data.results.map((character) => (\n                <CharacterCard\n                  key={character.id}\n                  name={character.name}\n                  image={character.image}\n                />\n              ))}\n          </Row>\n\n          {loading && <p clasname=\"textCenter\">Loading...</p>}\n          {!loading && data.info.next && (\n            <button\n              onClick={() => {\n                setNextPage(nextPage + 1);\n                setLoading(true);\n              }}\n            >\n              Load More\n            </button>\n          )}\n        </Container>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/scss/main.scss\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}